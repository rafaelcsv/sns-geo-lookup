---
title: "Tabela de pesquisa das áreas de abrangência das Unidades Locais de Saúde (versão de 2025)"
author:
  name: "Rafael Vasconcelos"
date: "`r Sys.Date()`"
format:
  html:
    page-layout: full
    smooth-scroll: true
    toc: true
    toc-location: left
    embed-resources: true
    number-sections: true
    code-fold: show
    code-tools: true
    code-overflow: wrap
theme:
  light: cosmo
  dark: [cosmo, theme-dark.scss]
project:
  output-dir: outputs/
---

# Arrumação

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  collapse = FALSE, # Whether to collapse the outputs into the code blocks
  warning = FALSE, # Whether to display warnings
  message = TRUE, # Whether to display messages
  echo = TRUE, # Whether to display the code
  dpi = 300,
  fig.width = 10.4,
  fig.height = 4.8
)

rm(list = ls(all.names = TRUE)) # will clear all objects includes hidden objects.
```

## Pacotes

```{r packages, message=FALSE}
# install.packages("pacman")  # needed if using pacman for the first time
#
# pacman::p_unload(all)        # unloads all non base packages

pacman::p_load(
  DT, # html tables
  janitor, # clean_names
  rio, # data import
  tidyverse # data management + ggplot2 graphics + factors
)
```

# Carregamento de dados

Carrega um ficheiro com a informação de ACES por município (atualizado a 2023-12-31).

```{r load-municipalities}
# loads municipalities linkage file
municipalities_reference <- read_csv("inputs/linkage_geo.csv", col_types = "c") |>
  select(geo, cod_geo_nuts2002, cod_geo, nuts1, nuts2, nuts3, pais, cod_pais, aces2, cod_aces, ars, cod_ars)
```

Carrega um ficheiro com a informação freguesias por município.

```{r load-parishes}
# loads parishes linkage file
## source: https://dados.gov.pt/pt/datasets/freguesias-de-portugal/
parishes_reference <- import("inputs/freguesias-metadata.xlsx") |>
  clean_names() |>
  select(distrito, concelho, freguesia, dicofre)
```

# Limpeza de dados

Prepara o ficheiro com os ACES para a ligação - serão utilizados os 4 últimos dígitos do código do município. As colunas são renomeadas para esclarecer as datas de referência.

```{r clean-municipalities}
# prepares municipalities file for linkage
municipalities_reference <- municipalities_reference |>
  rename(
    nuts1_2013 = "nuts1",
    nuts2_2013 = "nuts2",
    nuts3_2013 = "nuts3",
    municipio_2013 = "geo",
    municipio_2013_cod = "cod_geo",
    municipio_2002_cod = "cod_geo_nuts2002",
    ars_2022 = "ars",
    ars_2022_cod = "cod_ars",
    aces_2023 = "aces2",
    aces_2023_cod = "cod_aces",
    pais_cod = "cod_pais"
  ) |>
  mutate(
    # turns all variables into characters
    across(everything(), as.character),
    # cod_mun4 is used to link the two files
    cod_mun4 = substring(municipio_2013_cod, 4),
    # creates columns with the appropiate INE codes for each NUTS I, II, and III with their reference years
    nuts1_2002_cod = substring(municipio_2002_cod, 1, 1),
    nuts1_2013_cod = substring(municipio_2013_cod, 1, 1),
    nuts2_2002_cod = substring(municipio_2002_cod, 1, 2),
    nuts2_2013_cod = substring(municipio_2013_cod, 1, 2),
    nuts3_2002_cod = substring(municipio_2002_cod, 1, 3),
    nuts3_2013_cod = substring(municipio_2013_cod, 1, 3)
  )
```

Prepara o ficheiro com as freguesias para a ligação - serão utilizados os 4 primeiros dígitos do código da freguesia (referentes ao município). Cria-se uma coluna com os códigos de distrito (usados pelo INE num número limitado de indicadores).

```{r clean-parishes}
# prepares parishes file for linkage
parishes_reference <- parishes_reference |>
  rename(
    # adds a reference year to the variable names
    distrito_2013 = "distrito",
    freguesia_2013 = "freguesia",
    dicofre_2013 = "dicofre"
  ) |>
  mutate(
    # turns all variables into characters
    across(everything(), as.character),
    # cod_mun4 is used to link the two files
    cod_mun4 = substring(dicofre_2013, 1, 4),
    # municipio_2013_teste will be used to test if the linkage between the two files was successful
    municipio_2013_teste = case_when(
      cod_mun4 == "4501" ~ "Calheta [R.A. Açores]",
      cod_mun4 == "4201" ~ "Lagoa [R.A. Açores]",
      TRUE ~ as.character(concelho)
    ),
    # sets disctrict codes used by some INE databases
    distrito_2013_cod = case_when(
      distrito_2013 == "Aveiro" ~ "01",
      distrito_2013 == "Beja" ~ "02",
      distrito_2013 == "Braga" ~ "03",
      distrito_2013 == "Bragança" ~ "04",
      distrito_2013 == "Castelo Branco" ~ "05",
      distrito_2013 == "Coimbra" ~ "06",
      distrito_2013 == "Évora" ~ "07",
      distrito_2013 == "Faro" ~ "08",
      distrito_2013 == "Guarda" ~ "09",
      distrito_2013 == "Leiria" ~ "10",
      distrito_2013 == "Lisboa" ~ "11",
      distrito_2013 == "Portalegre" ~ "12",
      distrito_2013 == "Porto" ~ "13",
      distrito_2013 == "Santarém" ~ "14",
      distrito_2013 == "Setúbal" ~ "15",
      distrito_2013 == "Viana do Castelo" ~ "16",
      distrito_2013 == "Vila Real" ~ "17",
      distrito_2013 == "Viseu" ~ "18",
      distrito_2013 %in% c("Ilha de Santa Maria", "Ilha de São Miguel", "Ilha Terceira", "Ilha Graciosa", "Ilha de São Jorge", "Ilha do Pico", "Ilha do Faial", "Ilha das Flores", "Ilha do Corvo") ~ "2",
      distrito_2013 %in% c("Ilha da Madeira", "Ilha de Porto Santo") ~ "3"
    )
  )
```

# Teste Pré Ligação

Confirmar que há correspondência entre municípios.

```{r pre-test}
# tests if all values for `cod_mun4` have a match
anti_join(municipalities_reference, parishes_reference, by = "cod_mun4")

# tests if all municipality names have a match
anti_join(municipalities_reference, parishes_reference, by = c("municipio_2013" = "municipio_2013_teste"))
```

# Ligação

União das duas tabelas numa só.

```{r linkage}
# links parishes and municipalities, `municipio_2013_teste` is dropped and the column order is defined
sns_geo_lookup <- full_join(parishes_reference, municipalities_reference, by = "cod_mun4") |>
  select(freguesia_2013, dicofre_2013, municipio_2013, municipio_2013_cod, municipio_2002_cod, distrito_2013, distrito_2013_cod, nuts3_2013, nuts3_2013_cod, nuts3_2002_cod, nuts2_2013, nuts2_2013_cod, nuts1_2013, nuts1_2013_cod, pais, pais_cod, aces_2023, aces_2023_cod, ars_2022, ars_2022_cod)
```

## Correção "Estrangeiro" e "Ignorado"

Adicionam-se valores às colunas em falta para as linhas Estrangeiro e Ignorado.

```{r corresctions-missing}
# adds missing info to 'Estrangeiro' and 'Ignorado'
sns_geo_lookup <- sns_geo_lookup |>
  mutate(
    freguesia_2013 = case_when(
      municipio_2013_cod == "0" ~ "Estrangeiro",
      municipio_2013_cod == "9999999" ~ "Ignorado",
      TRUE ~ as.character(freguesia_2013)
    ),
    dicofre_2013 = case_when(
      municipio_2013_cod == "0" ~ "0",
      municipio_2013_cod == "9999999" ~ "999999",
      TRUE ~ as.character(dicofre_2013)
    ),
    distrito_2013 = case_when(
      municipio_2013_cod == "0" ~ "Estrangeiro",
      municipio_2013_cod == "9999999" ~ "Ignorado",
      TRUE ~ as.character(distrito_2013)
    ),
    distrito_2013_cod = case_when(
      municipio_2013_cod == "0" ~ "0",
      municipio_2013_cod == "9999999" ~ "99",
      TRUE ~ as.character(distrito_2013_cod)
    )
  )
```


## Correção ACES

São corrigidas as fronteiras dos ACES nos concelhos de Lisboa, Porto, Vila Nova de Gaia, Espinho e Gondomar - ver notas.

```{r corrections-aces}
# cleans up the health cluster boundaries in Lisbon and Porto Metropolitan Areas
sns_geo_lookup <- sns_geo_lookup |>
  mutate(
    aces_2023 = case_when(
      # ACES Lisboa Central
      municipio_2013 == "Lisboa" & freguesia_2013 %in% c("Areeiro", "Arroios", "Beato", "Estrela", "Marvila", "Misericórdia", "Olivais", "Parque das Nações", "Penha de França", "Santa Maria Maior", "Santo António", "São Vicente") ~ "ACES Lisboa Central",
      # ACES Lisboa Norte
      municipio_2013 == "Lisboa" & freguesia_2013 %in% c("Alvalade", "Avenidas Novas", "Benfica", "Campolide", "Carnide", "Lumiar", "São Domingos de Benfica", "Santa Clara") ~ "ACES Lisboa Norte",
      # parish split between ACES Lisboa Central and ACES Lisboa Ocidental/Oeiras
      municipio_2013 == "Lisboa" & freguesia_2013 %in% c("Campo de Ourique") ~ "ACES Lisboa Central / ACES Lisboa Ocidental/Oeiras",
      # ACES Lisboa Ocidental/Oeiras
      municipio_2013 == "Lisboa" & freguesia_2013 %in% c("Ajuda", "Belém", "Alcântara", "Campo de Ourique") ~ "ACES Lisboa Ocidental/Oeiras",
      municipio_2013 == "Oeiras" ~ "ACES Lisboa Ocidental/Oeiras",
      # ACES Porto Ocidental
      municipio_2013 == "Porto" & freguesia_2013 %in% c("Ramalde", "União das freguesias de Aldoar, Foz do Douro e Nevogilde", "União das freguesias de Cedofeita, Santo Ildefonso, Sé, Miragaia, São Nicolau e Vitória", "União das freguesias de Lordelo do Ouro e Massarelos") ~ "ACES Porto Ocidental",
      # ACES Porto Oriental
      municipio_2013 == "Porto" & freguesia_2013 %in% c("Bonfim", "Campanhã", "Paranhos") ~ "ACES Porto Oriental",
      # ACES Gaia
      municipio_2013 == "Vila Nova de Gaia" & freguesia_2013 %in% c("Avintes", "Canidelo", "Oliveira do Douro", "União das freguesias de Mafamude e Vilar do Paraíso", "União das freguesias de Santa Marinha e São Pedro da Afurada", "Vilar de Andorinho") ~ "ACES Gaia",
      # ACES Espinho/Gaia
      municipio_2013 == "Vila Nova de Gaia" & freguesia_2013 %in% c("Arcozelo", "Canelas", "Madalena", "São Félix da Marinha", "União das freguesias de Grijó e Sermonde", "União das freguesias de Gulpilhares e Valadares", "União das freguesias de Pedroso e Seixezelo", "União das freguesias de Sandim, Olival, Lever e Crestuma", "União das freguesias de Serzedo e Perosinho") ~ "ACES Espinho/Gaia",
      municipio_2013 == "Gondomar" & freguesia_2013 %in% c("Lomba") ~ "ACES Espinho/Gaia",
      municipio_2013 == "Espinho" ~ "ACES Espinho/Gaia",
      TRUE ~ as.character(aces_2023)
    ),
    aces_2023 = str_replace_all(aces_2023, "ACeS", "ACES"),
    aces_2023 = str_replace_all(aces_2023, " Da ", " da "),
    aces_2023 = str_replace_all(aces_2023, "Almada/Seixal", "Almada-Seixal"),
    aces_2023 = str_replace_all(aces_2023, "Loures/Odivelas", "Loures-Odivelas"),
    aces_2023 = str_replace_all(aces_2023, "Lisboa Ocidental/Oeiras", "Lisboa Ocidental e Oeiras")
  )
```


# Reorganização em ULS

Incorporar novas ULS, já com a alteração nas ULS Entre Douro e Vouga e ULS Região de Aveiro, que vigoram desde 1 de outubro de 2024.

```{r linkage-uls}
# loads ULS linkage file
uls_reference <- import("inputs/reorganizacao-uls.xlsx", sheet = 2) |>
  clean_names() |>
  rename(uls_2024 = designacao, aces_2023 = componentes_curto) |>
  mutate(
    uls_2024 = str_replace(uls_2024, "Unidade Local de Saúde da ", "ULS "),
    uls_2024 = str_replace(uls_2024, "Unidade Local de Saúde de ", "ULS "),
    uls_2024 = str_replace(uls_2024, "Unidade Local de Saúde do ", "ULS "),
    uls_2024 = str_remove(uls_2024, ", E. P. E.")
  ) |>
  filter(!str_detect(uls_2024, "Instituto Português de Oncologia")) |>
  filter(!str_detect(aces_2023, "Centro de Medicina de Reabilitação ")) |>
  filter(!str_detect(aces_2023, "Hospital ")) |>
  filter(!str_detect(aces_2023, "Centro Hospitalar ")) |>
  filter(!str_detect(aces_2023, "Instituto de Oftalmologia ")) |>
  filter(!str_detect(aces_2023, "Laboratório de Saúde Pública ")) |>
  filter(!str_detect(aces_2023, "ULS Castelo Branco")) |>
  select(uls_2024, aces_2023) |>
  add_row(uls_2024 = "ULS Castelo Branco", aces_2023 = "ACES Beira Interior Sul (ULS Castelo Branco)") |>
  add_row(uls_2024 = "ULS Castelo Branco", aces_2023 = "ACES Pinhal Interior Sul (ULS Castelo Branco)") |>
  ## incorporate the municipality and parish changes in SNS organization from the 2024 ULS reform
  full_join(sns_geo_lookup |> distinct(aces_2023, municipio_2013, freguesia_2013), by = "aces_2023") |>
  mutate(
    across(c(aces_2023, uls_2024), ~ case_when(
      freguesia_2013 %in% c("Camarate", "Unhos", "Apelação") ~ ifelse(cur_column() == "aces_2023", "ACES Loures-Odivelas", "ULS São José"),
      municipio_2013 == "Ovar" ~ ifelse(cur_column() == "aces_2023", "ACES Baixo Vouga", "ULS Entre Douro e Vouga"),
      municipio_2013 %in% c("Águeda", "Albergaria-a-Velha", "Anadia", "Aveiro", "Estarreja", "Ílhavo", "Murtosa", "Oliveira do Bairro", "Sever do Vouga", "Vagos") ~ ifelse(cur_column() == "aces_2023", "ACES Baixo Vouga", "ULS Região de Aveiro"),
      municipio_2013 == "Mafra" ~ ifelse(cur_column() == "aces_2023", "ACES Oeste Sul", "ULS Santa Maria"),
      municipio_2013 %in% c("Alcobaça", "Nazaré") ~ ifelse(cur_column() == "aces_2023", "ACES Oeste Norte", "ULS Região de Leiria"),
      municipio_2013 %in% c("Bombarral", "Caldas da Rainha", "Óbidos", "Peniche") ~ ifelse(cur_column() == "aces_2023", "ACES Oeste Norte", "ULS Região de Leiria"),
      municipio_2013 == "Ourém" ~ ifelse(cur_column() == "aces_2023", "ACES Médio Tejo", "ULS Região de Leiria"),
      municipio_2013 %in% c("Abrantes", "Alcanena", "Constância", "Entroncamento", "Ferreira do Zêzere", "Mação", "Sardoal", "Torres Novas", "Tomar", "Vila Nova da Barquinha") ~ ifelse(cur_column() == "aces_2023", "ACES Médio Tejo", "ULS Médio Tejo"),
      municipio_2013 == "Celorico de Basto" ~ ifelse(cur_column() == "aces_2023", "ACES Baixo Tâmega", "ULS Alto Ave"),
      municipio_2013 %in% c("Cantanhede", "Coimbra", "Condeixa-a-Nova", "Mealhada", "Mira", "Mortágua", "Penacova") ~ ifelse(cur_column() == "aces_2023", "ACES Baixo Mondego", "ULS Coimbra"),
      municipio_2013 %in% c("Figueira da Foz", "Soure", "Montemor-o-Velho") ~ ifelse(cur_column() == "aces_2023", "ACES Baixo Mondego", "ULS Baixo Mondego"),
      municipio_2013 == "Vila de Rei" ~ ifelse(cur_column() == "aces_2023", "ACES Pinhal Interior Sul (ULS Castelo Branco)", "ULS Médio Tejo"),
      municipio_2013 %in% c("Idanha-a-Nova", "Penamacor", "Vila Velha de Ródão") ~ ifelse(cur_column() == "aces_2023", "ACES Beira Interior Sul (ULS Castelo Branco)", "ULS Castelo Branco"),
      municipio_2013 %in% c("Oleiros", "Proença-a-Nova", "Sertã") ~ ifelse(cur_column() == "aces_2023", "ACES Pinhal Interior Sul (ULS Castelo Branco)", "ULS Castelo Branco"),
      aces_2023 == "ACES Lisboa Central / ACES Lisboa Ocidental e Oeiras" ~ ifelse(cur_column() == "aces_2023", "ACES Lisboa Central / ACES Lisboa Ocidental e Oeiras", "ULS Lisboa Ocidental"),
      aces_2023 %in% c("ACES Funchal", "ACES Madeira Oeste", "ACES Madeira Este", "ACES Porto Santo", "USI Santa Maria", "USI São Miguel", "USI Terceira", "USI Graciosa", "USI São Jorge", "USI Pico", "USI Faial", "USI Flores", "USI Corvo", "Ignorado", "Estrangeiro") ~ aces_2023,
      TRUE ~ .
    ))
  ) |>
  filter(!str_detect(aces_2023, "CS "))

# links ACES and ULS, then the column order is defined
sns_geo_lookup <- right_join(uls_reference, sns_geo_lookup, by = c("aces_2023", "municipio_2013", "freguesia_2013")) |> select(freguesia_2013, dicofre_2013, municipio_2013, municipio_2013_cod, municipio_2002_cod, distrito_2013, distrito_2013_cod, nuts3_2013, nuts3_2013_cod, nuts3_2002_cod, nuts2_2013, nuts2_2013_cod, nuts1_2013, nuts1_2013_cod, pais, pais_cod, aces_2023, aces_2023_cod, ars_2022, ars_2022_cod, uls_2024)
```



# NUTS 2024

Incorpora novas [NUTS 2024](https://cse.ine.pt/ngt_server/attachfileu.jsp?look_parentBoui=619950284&att_display=n&att_download=y) e respetivos códigos utilizados pelo INE.

```{r linkage-uls}
# loads ULS linkage file
nuts_reference <- import("inputs/nuts-2024.xlsx") |> select(municipio_2013, municipio_2024, nuts3_2024, nuts3_2024_cod, nuts2_2024, nuts2_2024_cod, nuts1_2024, nuts1_2024_cod)

# links ACES and ULS, then the column order is defined
sns_geo_lookup <- left_join(sns_geo_lookup, nuts_reference, by = "municipio_2013") |> select(freguesia_2013, dicofre_2013, municipio_2013, municipio_2013_cod, municipio_2002_cod, distrito_2013, distrito_2013_cod, nuts3_2013, nuts3_2013_cod, nuts3_2002_cod, nuts2_2013, nuts2_2013_cod, nuts1_2013, nuts1_2013_cod, pais, pais_cod, aces_2023, aces_2023_cod, ars_2022, ars_2022_cod, uls_2024, municipio_2024, nuts3_2024, nuts3_2024_cod, nuts2_2024, nuts2_2024_cod, nuts1_2024, nuts1_2024_cod)
```



# Teste Pós Ligação

Confirmar que não há valores em falta e conta o número total de freguesias - ver notas.

```{r post-test}
# counts the missing values in each column.
colSums(is.na(sns_geo_lookup))

# shows the rows with missing values
datatable(sns_geo_lookup[rowSums(is.na(sns_geo_lookup)) > 0, ])

# counts the number of parishes by NUTS I
datatable(count(sns_geo_lookup, nuts1_2013, sort = TRUE, name = "n freguesias"))
```


# Notas

::: {.callout-warning appearance="simple"}
### Freguesia de Campo de Ourique

Atenção que há uma freguesia em Lisboa (Campo de Ourique) que é dividida entre dois ACES (Lisboa Norte / Lisboa Ocidental/Oeiras) com base na divisão de freguesias anterior a 2012. A antiga freguesia de Santa Isabel pertence ao ACES Lisboa Norte e a antiga freguesias de Santo Condestável pertence ao ACES Lisboa Ocidental/Oeiras.
:::

::: {.callout-warning appearance="simple"}
### Corvo

Apesar de oficialmente [não existir freguesia na vila de Corvo](https://expresso.pt/sociedade/2019-02-10-Corvo-o-unico-concelho-sem-juntas-de-freguesias) (Ilha do Corvo, Açores), para fins estatísticos existe um código para esse nível (dicofre: 490101). Assim sendo, o número total de freguesias na listagem poderá não bater certo com os números administrativos.
:::

# Results

É gravado um ficheiro `sns-geo-lookup.csv` com a informação que se pode consultar em baixo.

```{r results}
# saves as .csv
write.csv(sns_geo_lookup, file = "outputs/sns-geo-lookup.csv", fileEncoding = "UTF-8", row.names = FALSE)

writexl::write_xlsx(municipalities_reference, path = "outputs/municipalities_reference.xlsx")

# shows the resulting data.frame as a html table
datatable(sns_geo_lookup)
```


# Próximos passos

-   [ ] Incorporar coluna com nomes (e códigos?) de freguesias anteriores a 2012, para dados históricos;
-   [ ] Incorporar coluna com nomes de NUTS anteriores a 2013, para dados históricos;
